// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: chatgtp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatGTPService_Chat_FullMethodName = "/api.ChatGTPService/Chat"
)

// ChatGTPServiceClient is the client API for ChatGTPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGTPServiceClient interface {
	// Sends a greeting
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (ChatGTPService_ChatClient, error)
}

type chatGTPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGTPServiceClient(cc grpc.ClientConnInterface) ChatGTPServiceClient {
	return &chatGTPServiceClient{cc}
}

func (c *chatGTPServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (ChatGTPService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatGTPService_ServiceDesc.Streams[0], ChatGTPService_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatGTPServiceChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatGTPService_ChatClient interface {
	Recv() (*ChatReply, error)
	grpc.ClientStream
}

type chatGTPServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatGTPServiceChatClient) Recv() (*ChatReply, error) {
	m := new(ChatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatGTPServiceServer is the server API for ChatGTPService service.
// All implementations should embed UnimplementedChatGTPServiceServer
// for forward compatibility
type ChatGTPServiceServer interface {
	// Sends a greeting
	Chat(*ChatRequest, ChatGTPService_ChatServer) error
}

// UnimplementedChatGTPServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatGTPServiceServer struct {
}

func (UnimplementedChatGTPServiceServer) Chat(*ChatRequest, ChatGTPService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

// UnsafeChatGTPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGTPServiceServer will
// result in compilation errors.
type UnsafeChatGTPServiceServer interface {
	mustEmbedUnimplementedChatGTPServiceServer()
}

func RegisterChatGTPServiceServer(s grpc.ServiceRegistrar, srv ChatGTPServiceServer) {
	s.RegisterService(&ChatGTPService_ServiceDesc, srv)
}

func _ChatGTPService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatGTPServiceServer).Chat(m, &chatGTPServiceChatServer{stream})
}

type ChatGTPService_ChatServer interface {
	Send(*ChatReply) error
	grpc.ServerStream
}

type chatGTPServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatGTPServiceChatServer) Send(m *ChatReply) error {
	return x.ServerStream.SendMsg(m)
}

// ChatGTPService_ServiceDesc is the grpc.ServiceDesc for ChatGTPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGTPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ChatGTPService",
	HandlerType: (*ChatGTPServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatGTPService_Chat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatgtp.proto",
}
